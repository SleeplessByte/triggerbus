{"version":3,"file":"triggerbus.mjs","sources":["../src/triggerbus.ts"],"sourcesContent":["type Unsubscribe = () => EventBus\r\ntype Callback = (...args) => void\r\n\r\nclass EventBus {\r\n\r\n  private callbacks: {}\r\n\r\n  constructor() {\r\n    this.callbacks = {}\r\n  }\r\n\r\n  _callbacks(name): Array<Callback> {\r\n    if (!this.callbacks[name]) {\r\n      this.callbacks[name] = []\r\n    }\r\n\r\n    return this.callbacks[name]\r\n  }\r\n\r\n  /**\r\n   * Trigger an event\r\n   *\r\n   * @param {String} name name of the event to trigger\r\n   * @param {any[]} args arguments to pass to callback\r\n   *\r\n   * @returns {EventBus}\r\n   */\r\n  trigger(name, ...args) {\r\n    this._callbacks(name).forEach(function(c) {\r\n      c.apply(undefined, args)\r\n    })\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Add a callback to an event name\r\n   *\r\n   * @param {String} name name of the event to listen on\r\n   * @param {(...args) => void} fn callback to call when it's triggered\r\n   *\r\n   * @returns {() => EventBus} unsubscribe this callback\r\n   */\r\n  on(name, fn): Unsubscribe {\r\n    this._callbacks(name).push(fn)\r\n    return () => this.off(name, fn)\r\n  }\r\n\r\n /**\r\n  * Remove callbacks from a name, or a specific one if given\r\n  *\r\n  * @param {String} name name of the event to remove from\r\n  * @param {(...args) => void}[]fn optional callback to remove from the event\r\n  *\r\n  * @returns {EventBus}\r\n  */\r\n  off(name: string, fn?: Callback): this {\r\n    if (!fn) {\r\n      this.callbacks[name] = []\r\n    } else {\r\n      this.callbacks[name] = this._callbacks(name).filter((c) => c !== fn)\r\n    }\r\n    return this\r\n  }\r\n\r\n   /**\r\n   * Add a callback to an event name, which is removed the first time it is\r\n   *   triggered.\r\n   *\r\n   * @param {String} name name of the event to listen on\r\n   * @param {(...args) => void} fn callback to call when it's triggered\r\n   *\r\n   * @returns {() => EventBus} unsubscribe this callback\r\n   */\r\n  once(name: string, fn: Callback): Unsubscribe {\r\n    const EventBus = this\r\n    function fnOnce(...args) {\r\n      fn.apply(undefined, args)\r\n      EventBus.off(name, fnOnce)\r\n    }\r\n    return this.on(name, fnOnce)\r\n  }\r\n}\r\n\r\ninterface triggerbus {\r\n  (): EventBus\r\n  EventBus: typeof EventBus\r\n}\r\n\r\nconst triggerbus = <triggerbus>function () {\r\n  return new EventBus()\r\n}\r\ntriggerbus.EventBus = EventBus\r\n\r\nexport default triggerbus\r\n"],"names":["EventBus","constructor","callbacks","_callbacks","name","this","trigger","forEach","c","apply","undefined","args","on","fn","push","off","filter","once","fnOnce","const","triggerbus"],"mappings":"AAGA,IAAMA,EAIJC,gBACOC,UAAY,IAGnBC,YAAAA,oBAAWC,UACJC,KAAKH,UAAUE,UACbF,UAAUE,GAAQ,IAGlBC,KAAKH,UAAUE,IAWxBE,YAAAA,iBAAQF,6EACDD,WAAWC,GAAMG,QAAQ,SAASC,KACnCC,WAAMC,EAAWC,KAEdN,MAWTO,YAAAA,YAAGR,EAAMS,0BACFV,WAAWC,GAAMU,KAAKD,qBACdR,EAAKU,IAAIX,EAAMS,KAW9BE,YAAAA,aAAIX,EAAcS,eAITX,UAAUE,GAHZS,EAGoBR,KAAKF,WAAWC,GAAMY,gBAAQR,UAAMA,IAAMK,IAF1C,GAIlBR,MAYTY,YAAAA,cAAKb,EAAcS,OACXb,EAAWK,YAKVA,KAAKO,GAAGR,WAJNc,6DACJT,WAAMC,EAAWC,KACXI,IAAIX,EAAMc,MAWzBC,IAAMC,EAAyB,kBACtB,IAAIpB,GAEboB,EAAWpB,SAAWA"}